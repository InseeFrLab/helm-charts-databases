{{- if or .Values.ingress.enabled .Values.route.enabled }}
{{- if .Values.ingress.enabled }}
- You can connect to the trino UI with your browser on this [link](http{{ if $.Values.ingress.tls }}s{{ end }}://{{ .Values.ingress.hostname }})
{{- end }}
{{- if .Values.route.enabled }}
- You can connect to the trino UI with your browser on this [link](https://{{ .Values.route.hostname }})
{{- end }}
{{- else if contains "NodePort" .Values.networking.service.type }}
  export NODE_PORT=$(kubectl get --namespace {{ .Release.Namespace }} -o jsonpath="{.spec.ports[0].nodePort}" services {{ include "library-chart.fullname" . }})
  export NODE_IP=$(kubectl get nodes --namespace {{ .Release.Namespace }} -o jsonpath="{.items[0].status.addresses[0].address}")
  echo http://$NODE_IP:$NODE_PORT
{{- else if contains "LoadBalancer" .Values.networking.service.type }}
     NOTE: It may take a few minutes for the LoadBalancer IP to be available.
           You can watch the status of by running 'kubectl get --namespace {{ .Release.Namespace }} svc -w {{ include "library-chart.fullname" . }}'
  export SERVICE_IP=$(kubectl get svc --namespace {{ .Release.Namespace }} {{ include "library-chart.fullname" . }} --template "{{"{{ range (index .status.loadBalancer.ingress 0) }}{{.}}{{ end }}"}}")
  echo http://$SERVICE_IP:{{ .Values.networking.service.port }}
{{- else if contains "ClusterIP" .Values.networking.service.type }}
  export POD_NAME=$(kubectl get pods --namespace {{ .Release.Namespace }} -l "app.kubernetes.io/name={{ include "library-chart.fullname" . }},app.kubernetes.io/instance={{ .Release.Name }}" -o jsonpath="{.items[0].metadata.name}")
  echo "Visit http://127.0.0.1:8080 to use your application"
  kubectl --namespace {{ .Release.Namespace }} port-forward $POD_NAME 8080:80
{{- end }}
- The login is **{{ .Values.security.username }}**
- The password is **{{ .Values.security.password }}**

{{- if or (and (.Values.ingress).enabled (.Values.ingress).tls) (.Values.route).enabled -}}

{{- $catalogs := list -}}
{{- range $secret := (lookup "v1" "Secret" .Release.Namespace "").items -}}
  {{- $secretService := index (($secret.metadata).annotations | default dict) "onyxia/discovery" | default "" | toString -}}
  {{- if $secretService -}}
    {{- if eq "mongodb" $secretService -}}
      {{- $catalogs = append $catalogs "mongodb" -}}
    {{- else if eq "postgres" $secretService -}}
      {{- $catalogs = append $catalogs "postgresql" -}}
    {{- else if eq "hive" $secretService -}}
      {{- $catalogs = append $catalogs "hive" -}}
      {{- $catalogs = append $catalogs "iceberg" -}}
      {{- $catalogs = append $catalogs "delta-lake" -}}
    {{- else if eq "elastic" $secretService -}}
      {{- $catalogs = append $catalogs "elasticsearch" -}}
    {{- else if eq "opensearch" $secretService -}}
      {{- $catalogs = append $catalogs "opensearch" -}}
    {{- end -}}
  {{- end -}}
{{- end }}

To use Trino with Python and the `trino` client (see [full doc](https://github.com/trinodb/trino-python-client)):
```bash
pip install trino
```

```python
from trino.dbapi import connect
from trino.auth import BasicAuthentication

conn = connect(
    host={{ include "library-chart.service-url" . | quote }},
    port="443",
    auth=BasicAuthentication("{{ .Values.security.username }}", "{{ .Values.security.password }}"),
    catalog="{{ first $catalogs }}",
    {{- if gt (len $catalogs) 1 }}
    # Available catalogs:
      {{- range $catalogs }}
    # catalog={{ quote . }}
      {{- end }}
    {{- end }}
    schema="default"
)
cur = conn.cursor()
print(cur.execute("CREATE TABLE IF NOT EXISTS test(key bigint)").fetchall())
print(cur.execute("SHOW TABLES").fetchall())
```
{{- end -}}
